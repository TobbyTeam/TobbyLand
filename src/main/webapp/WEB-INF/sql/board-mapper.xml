<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BoardRepository">

  <select id="selectBoardCount" parameterType="int" resultType="int" >
    select count(board_id)
    from board
    where department_id = #{department_id} and is_delete = 0 and is_reply = 0
  </select>

  <select id="selectBoardAll" parameterType="map" resultType="map" >
    select b.rnum, b.board_id, b.writer, b.department_id, b.title, date_format(b.write_date, '%Y.%m.%d') as write_date,
           b.hit, b.likes, b.is_anonymity, sum(if(b2.is_delete = 0,1,0)) as count
    from board b left outer join board b2 on b.board_id = b2.upper_id
    where b.department_id = #{department_id} and b.is_delete = 0 and b.is_reply = 0
    group by b.board_id
    order by b.rnum desc
    limit 15 offset #{start}
  </select>

  <select id="selectBoardMaxRnum" parameterType="int" resultType="int" >
    select ifnull(max(rnum),0) as rnum
    from board
    where department_id = #{department_id}
  </select>

  <select id="selectBoard" parameterType="int" resultType="map" >
    select board_id, department_id, writer, title, contents, date_format(write_date, '%Y.%m.%d %T') as write_date, hit, likes, dislike, report, is_anonymity
    from board
    where board_id = #{board_id} and is_delete = 0
  </select>

  <select id="selectBoardReplyAll" parameterType="int" resultType="map" >
    select board_id, writer, contents, date_format(write_date, '%Y.%m.%d %T') as write_date, report
    from board
    where upper_id = #{board_id} and is_delete = 0
    order by write_date
  </select>

  <select id="selectBoardMember_id" parameterType="int" resultType="int">
    select member_id from board where board_id = #{board_id}
  </select>

  <select id="selectBoardSubCount" parameterType="map" resultType="int" >
    select count(bs_id)
    from board_sub
    where board_id = #{board_id} and member_id = #{member_id}
  </select>

  <select id="selectBoardSubType" parameterType="map" resultType="int">
    select kind from board_sub where board_id = #{board_id} and member_id = #{member_id}
  </select>

  <select id="selectBoardSearchCount" parameterType="map" resultType="int" >
    select count(board_id)
    from board
    where department_id = #{department_id} and is_delete = 0 and is_reply = 0
    <choose>
      <when test="searchType != null and searchType.equalsIgnoreCase('title')">
        and title like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('contents')">
        and contents like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('title_contents')">
        and (title like CONCAT('%', #{searchWord}, '%') or contents like CONCAT('%', #{searchWord}, '%'))
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('writer')">
        and writer like CONCAT('%', #{searchWord}, '%')
      </when>
      <otherwise>
        and (title like CONCAT('%', #{searchWord}, '%') or contents like CONCAT('%', #{searchWord}, '%') or writer like CONCAT('%', #{searchWord}, '%'))
      </otherwise>
    </choose>
  </select>

  <select id="selectBoardSearch" parameterType="map" resultType="map">
    select b.rnum, b.board_id, b.writer, b.department_id, b.title, date_format(b.write_date, '%Y.%m.%d') as write_date,
           b.hit, b.likes, b.is_anonymity, sum(if(b2.is_delete = 0,1,0)) as count
    from board b left outer join board b2 on b.board_id = b2.upper_id
    where b.department_id = #{department_id} and b.is_delete = 0 and b.is_reply = 0
    <choose>
      <when test="searchType != null and searchType.equalsIgnoreCase('title')">
        and b.title like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('contents')">
        and b.contents like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('title_contents')">
        and (b.title like CONCAT('%', #{searchWord}, '%') or b.contents like CONCAT('%', #{searchWord}, '%'))
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('writer')">
        and b.writer like CONCAT('%', #{searchWord}, '%')
      </when>
      <otherwise>
        and (b.title like CONCAT('%', #{searchWord}, '%') or b.contents like CONCAT('%', #{searchWord}, '%') or b.writer like CONCAT('%', #{searchWord}, '%'))
      </otherwise>
    </choose>
    group by b.board_id
    order by b.rnum desc
    limit 15 offset #{start}
  </select>

  <select id="selectSiteNoticeAll" resultType="map" >
    select board_id, department_id, title, date_format(write_date, '%Y.%m.%d') as write_date
    from board
    where department_id = 14 and is_delete = 0 and is_reply = 0
    order by board_id desc limit 5
  </select>

  <select id="selectKpuNoticeAll" resultType="map" >
    select board_id, department_id, title, date_format(write_date, '%Y.%m.%d') as write_date
    from board
    where department_id = 15 and is_delete = 0 and is_reply = 0
    order by board_id desc limit 5
  </select>

  <select id="selectLatestAll" resultType="map" >
    select d.department_name, b.board_id, b.writer, b.department_id, b.title, date_format(b.write_date, '%Y.%m.%d %T') as write_date, b.is_anonymity
    from board b left outer join department d on b.department_id = d.department_id
    where d.kind in ('dept', 'etc') and b.is_delete = 0 and b.is_reply = 0
    group by b.board_id
    order by b.board_id desc limit 15
  </select>

  <select id="selectHotAll" parameterType="map" resultType="map" >
    select d.department_name, b.board_id, b.writer, b.department_id, b.title, b.hit, b.likes, b.is_anonymity, sum(if(b2.is_delete = 0,1,0)) as count
    from board b left outer join board b2 on b.board_id = b2.upper_id left outer join department d on b.department_id = d.department_id
    where d.kind in ('dept', 'etc') and b.is_delete = 0 and b.is_reply = 0 and b.likes <![CDATA[ >= ]]> 10
    group by b.board_id
    order by date_format(b.write_date, '%Y.%m.%d') desc, b.likes desc, b.hit desc, count desc, b.board_id desc limit 15
  </select>


  <!--insert-->

  <insert id="insertBoard" parameterType="map">
    <choose>
      <when test="upper_id != null">
        insert into board (department_id, member_id, writer, contents, is_reply, upper_id)
        values (#{department_id},#{member_id},#{writer},#{contents},1,#{upper_id})
      </when>
      <when test="is_anonymity != null">
        insert into board (department_id, member_id, writer, rnum, title, contents, is_anonymity)
        values (#{department_id},#{member_id},#{writer},#{rnum},#{title},#{contents},#{is_anonymity})
      </when>
      <otherwise>
        insert into board (department_id, member_id, writer, rnum, title, contents)
        values (#{department_id},#{member_id},#{writer},#{rnum},#{title},#{contents})
      </otherwise>
    </choose>
  </insert>

  <insert id="insertBoardSub" parameterType="map">
    insert into board_sub (board_id, member_id, kind)
    values (#{board_id},#{member_id},#{kind})
  </insert>
  
  <!--update-->
  
  <update id="updateBoardHit" parameterType="int">
    update board
    set
    hit = hit + 1
    where board_id = #{board_id} and is_delete = 0
  </update>

  <update id="updateBoard" parameterType="map">
    update board
    set
    title = #{title},
    contents = #{contents}
    where board_id = #{board_id}
  </update>

  <update id="updateBoardLike" parameterType="int">
    update board
    set
    likes = likes + 1
    where board_id = #{board_id}
  </update>

  <update id="updateBoardDislike" parameterType="int">
    update board
    set
    dislike = dislike + 1
    where board_id = #{board_id}
  </update>

  <update id="updateBoardReport" parameterType="int">
    update board
    set
    report = report + 1
    where board_id = #{board_id}
  </update>

  <update id="updateBoardIsDelete" parameterType="int">
    update board
    set
    is_delete = 1
    where board_id = #{board_id}
  </update>


  <!--delete-->

  <delete id="delete" parameterType="int">
    delete from board where board_id = #{board_id}
  </delete>

</mapper>