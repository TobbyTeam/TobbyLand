<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="LectureRepository">

  <!--select-->

  <select id="selectAll" resultType="map">
    select l.lecture_id, l.lecture_name, l.prof, l.likes, date_format(l.write_date, '%Y.%m.%d %T') as write_date, d.department_name
    from lecture l left outer join department d on l.dept = d.department_id
    where likes <![CDATA[ < ]]> 10 and is_delete = 0 order by lecture_id desc
  </select>

  <select id="selectMember_id" parameterType="int" resultType="int">
    select member_id from lecture where lecture_id = #{lecture_id}
  </select>

  <select id="selectConfirm" parameterType="int" resultType="Map">
    select member_id, is_delete from lecture where lecture_id = #{lecture_id}
  </select>

  <select id="selectLecture" parameterType="int" resultType="map">
    select lecture_id, lecture_name, dept, prof
    from lecture
    where lecture_id = #{lecture_id}
  </select>

  <select id="selectLectureSearch" parameterType="map" resultType="map">
    select l.lecture_id, l.lecture_name, l.prof, d.department_name, sum(if(e.is_delete = 0 and e.is_reply=0,1,0)) as count, ifnull(round(avg(if(e.is_delete = 0 and e.is_reply=0,e.score,null)), 1),0) as avg
    from lecture l left outer join evaluation e on l.lecture_id = e.lecture_id left outer join department d on l.dept = d.department_id
    where l.likes <![CDATA[ >= ]]> 10 and l.is_delete = 0
    <choose>
      <when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">
        and l.lecture_name like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('dept')">
        and d.department_name like CONCAT('%', #{searchWord}, '%')
      </when>
      <otherwise>
        and l.prof like CONCAT('%', #{searchWord}, '%')
      </otherwise>
    </choose>
    group by l.lecture_id
    order by d.department_name, count desc, avg desc
  </select>

  <select id="selectSubCount" parameterType="map" resultType="int" >
    select count(ls_id)
    from lecture_sub
    where lecture_id = #{lecture_id} and member_id = #{member_id}
  </select>

  <select id="selectBoardCount" parameterType="int" resultType="int" >
    select count(lb_id)
    from lecture_board
    where lecture_id = #{lecture_id} and is_delete = 0 and is_reply = 0
  </select>

  <select id="selectBoardAll" parameterType="map" resultType="map" >
    select b.rnum, b.lb_id, b.lecture_id, b.title, date_format(b.write_date, '%Y.%m.%d') as write_date, b.hit, b.report, sum(if(b2.is_delete = 0,1,0)) as count
    from lecture_board b left outer join lecture_board b2 on b.lb_id = b2.upper_id
    where b.lecture_id = #{lecture_id} and b.is_delete = 0 and b.is_reply = 0
    group by b.lb_id
    order by b.rnum desc
    limit 15 offset #{start}
  </select>

  <select id="selectBoardMaxRnum" parameterType="int" resultType="int" >
    select ifnull(max(rnum),0) as rnum
    from lecture_board
    where lecture_id = #{lecture_id}
  </select>

  <select id="selectBoard" parameterType="int" resultType="map" >
    select lb_id, lecture_id, title, contents, date_format(write_date, '%Y.%m.%d %T') as write_date, hit, report
    from lecture_board
    where lb_id = #{lb_id} AND is_delete = 0
  </select>

  <select id="selectBoardReplyAll" parameterType="int" resultType="map" >
    select lb_id, contents, date_format(write_date, '%Y.%m.%d %T') as write_date, report
    from lecture_board
    where upper_id = #{lb_id} and is_delete = 0
    order by write_date
  </select>

  <select id="selectBoardMember_id" parameterType="int" resultType="int">
    select member_id from lecture_board where lb_id = #{lb_id}
  </select>

  <select id="selectBoardConfirm" parameterType="int" resultType="map">
    select member_id, is_delete from lecture_board where lb_id = #{lb_id}
  </select>

  <select id="selectLecture_E" parameterType="int" resultType="map">
    select l.lecture_id, l.lecture_name, l.prof, d.department_name, count(if(e.is_delete = 0 and e.is_reply=0,1,null)) as count,  ifnull(round(avg(if(e.is_delete = 0 and e.is_reply=0,e.score,null)), 1),0) as avg
    from lecture l left outer join evaluation e on l.lecture_id = e.lecture_id left outer join department d on l.dept = d.department_id
    where l.lecture_id = #{lecture_id}
    group by l.lecture_id
  </select>

  <select id="selectBoardSubCount" parameterType="map" resultType="int" >
    select count(lb_id)
    from lecture_board_sub
    where lb_id = #{lb_id} and member_id = #{member_id}
  </select>

  <select id="selectBoardSearchCount" parameterType="map" resultType="int" >
    select count(lb_id)
    from lecture_board
    where lecture_id = #{lecture_id} and is_delete = 0 and is_reply = 0
    <choose>
      <when test="searchType != null and searchType.equalsIgnoreCase('title')">
        and title like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('contents')">
        and contents like CONCAT('%', #{searchWord}, '%')
      </when>
      <otherwise>
        and (title like CONCAT('%', #{searchWord}, '%') or contents like CONCAT('%', #{searchWord}, '%'))
      </otherwise>
    </choose>
  </select>

  <select id="selectBoardSearch" parameterType="map" resultType="map">
    select b.rnum, b.lb_id, b.lecture_id, b.title, date_format(b.write_date, '%Y.%m.%d') as write_date, b.hit, b.report, sum(if(b2.is_delete = 0,1,0)) as count
    from lecture_board b left outer join lecture_board b2 on b.lb_id = b2.upper_id
    where b.lecture_id = #{lecture_id} and b.is_delete = 0 and b.is_reply = 0
    <choose>
      <when test="searchType != null and searchType.equalsIgnoreCase('title')">
        and b.title like CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('contents')">
        and b.contents like CONCAT('%', #{searchWord}, '%')
      </when>
      <otherwise>
        and (b.title like CONCAT('%', #{searchWord}, '%') or b.contents like CONCAT('%', #{searchWord}, '%'))
      </otherwise>
    </choose>
    group by b.lb_id
    order by b.rnum desc
    limit 15 offset #{start}
  </select>


  <!--insert-->

  <insert id="insertLecture" parameterType="map">
    insert into lecture (member_id, lecture_name, dept, prof)
    values (#{member_id},#{lecture_name},#{dept},#{prof})
  </insert>

  <insert id="insertSub" parameterType="map">
    insert into lecture_sub (lecture_id, member_id)
    values (#{lecture_id},#{member_id})
  </insert>

  <insert id="insertBoard" parameterType="map">
    <choose>
      <when test="upper_id != null">
        insert into lecture_board (lecture_id, member_id, contents, is_reply, upper_id)
        values (#{lecture_id},#{member_id},#{contents},1,#{upper_id})
      </when>
      <otherwise>
        insert into lecture_board (lecture_id, member_id, rnum, title, contents)
        values (#{lecture_id},#{member_id},#{rnum},#{title},#{contents})
      </otherwise>
    </choose>
  </insert>

  <insert id="insertBoardSub" parameterType="map">
    insert into lecture_board_sub (lb_id, member_id)
    values (#{lb_id},#{member_id})
  </insert>

  <!--update-->

  <update id="updateLecture" parameterType="map">
    update lecture
    set
    lecture_name = #{lecture_name},
    dept = #{dept},
    prof = #{prof}
    where lecture_id = #{lecture_id} and is_delete = 0
  </update>

  <update id="updateLectureLike" parameterType="map">
    update lecture
    set
    likes = likes + 1
    where lecture_id = #{lecture_id} and is_delete = 0
  </update>

  <update id="updateIsDelete" parameterType="map">
    update lecture
    set is_delete = 1
    where lecture_id = #{lecture_id} and is_delete = 0
  </update>

  <update id="updateBoardHit" parameterType="int">
    update lecture_board
    set
    hit = hit + 1
    where lb_id = #{lb_id} and is_delete = 0
  </update>

  <update id="updateBoard" parameterType="map">
    update lecture_board
    set
    title = #{title},
    contents = #{contents}
    where lb_id = #{lb_id} and is_delete = 0
  </update>

  <update id="updateBoardIsDelete" parameterType="int">
    update lecture_board
    set
    is_delete = 1
    where lb_id = #{lb_id} and is_delete = 0
  </update>

  <update id="updateBoardReport" parameterType="map">
    update lecture_board
    set
    report = report + 1
    where lb_id = #{lb_id} and is_delete = 0
  </update>


  <!--delete-->

  <delete id="delete" parameterType="int">
    delete from lecture where lecture_id = #{value}
  </delete>




  <select id="selectAdmin" resultType="map">
    select * from lecture order by write_date desc
  </select>

  <select id="selectSearchAdmin" parameterType="map" resultType="map">
    select * from lecture
    where
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">lecture_name like CONCAT('%', #{searchWord}, '%')</when>
      <when test="searchType != null and searchType.equalsIgnoreCase('dept')">dept like CONCAT('%', #{searchWord}, '%')</when>
      <when test="searchType != null and searchType.equalsIgnoreCase('prof')">prof like CONCAT('%', #{searchWord}, '%')</when>
      <otherwise>member_id like CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    order by write_date desc
  </select>

  <update id="isUndelete" parameterType="map">
    update lecture
    set
    is_delete = 1
    where lecture_id = #{lecture_id}
  </update>

  <insert id="insertAdmin" parameterType="map">
    insert into lecture (member_id, lecture_name, dept, prof, likes)
    values (#{member_id},#{lecture_name},#{dept},#{prof}, 10)
  </insert>

<!--  <select id="boardAll" parameterType="map" resultType="map" >
        SELECT B.*
        FROM (
        SELECT @RNUM:=@RNUM-1 AS rnum , A.ls_id, A.title, A.write_date
        FROM (SELECT @RNUM:= #{total}+1) R,
        (SELECT * FROM LECTURE_SUB
        WHERE LECTURE_ID = #{lecture_id} AND KIND = 2 AND IS_DELETE = 1
        ORDER BY WRITE_DATE DESC) A) B
        LIMIT 15 OFFSET #{page}
  </select>-->

</mapper>