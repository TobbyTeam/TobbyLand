<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="LectureRepository">

  <select id="select" resultType="map">
    SELECT * FROM LECTURE WHERE LECTURE_ID = #{lecture_id}
  </select>

  <select id="selectIAN" resultType="map">

    SELECT L.LECTURE_ID as lecture_id, L.LECTURE_NAME as lecture_name, L.DEPT as dept, L.PROF as prof, Count(E.EVALUATION_ID) as count
    FROM LECTURE L LEFT OUTER JOIN EVALUATION E ON E.LECTURE_ID = L.LECTURE_ID
    WHERE L.LECTURE_ID = #{lecture_id} AND (E.IS_DELETE <![CDATA[ = ]]> 1 OR E.IS_DELETE iS NULL)
    GROUP BY L.LECTURE_ID

  </select>

  <select id="selectMember" resultType="String">
    SELECT member_id FROM LECTURE WHERE LECTURE_ID = #{lecture_id}
  </select>

  <select id="selectAll" resultType="map">
    SELECT * FROM LECTURE WHERE likes <![CDATA[ < ]]> 10 AND IS_DELETE <![CDATA[ = ]]> 1 ORDER BY WRITE_DATE DESC
  </select>

  <select id="selectAdmin" resultType="map">
    SELECT * FROM LECTURE ORDER BY WRITE_DATE DESC
  </select>

  <select id="selectSearch" parameterType="map" resultType="map">
    SELECT L.LECTURE_ID as lecture_id, L.LECTURE_NAME as lecture_name, L.DEPT as dept, L.PROF as prof, Count(E.EVALUATION_ID) as count
    FROM LECTURE L LEFT OUTER JOIN EVALUATION E ON E.LECTURE_ID = L.LECTURE_ID
    WHERE L.LIKES <![CDATA[ >= ]]> 10 AND L.IS_DELETE <![CDATA[ = ]]> 1 AND (E.IS_DELETE <![CDATA[ = ]]> 1 OR E.IS_DELETE iS NULL)
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">AND L.LECTURE_NAME LIKE CONCAT('%', #{searchWord}, '%')</when>
            <when test="searchType != null and searchType.equalsIgnoreCase('dept')">AND L.DEPT LIKE CONCAT('%', #{searchWord}, '%')</when>
            <otherwise> AND L.PROF LIKE CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    GROUP BY L.LECTURE_ID
    ORDER BY L.WRITE_DATE DESC
  </select>

  <select id="selectSearchAdmin" parameterType="map" resultType="map">
    SELECT * FROM LECTURE WHERE
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">LECTURE_NAME LIKE CONCAT('%', #{searchWord}, '%')</when>
      <when test="searchType != null and searchType.equalsIgnoreCase('dept')">DEPT LIKE CONCAT('%', #{searchWord}, '%')</when>
      <when test="searchType != null and searchType.equalsIgnoreCase('prof')">PROF LIKE CONCAT('%', #{searchWord}, '%')</when>
      <otherwise>MEMBER_ID LIKE CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    ORDER BY WRITE_DATE DESC
  </select>

  <delete id="delete" parameterType="int">
    DELETE FROM LECTURE WHERE LECTURE_ID = #{value}
  </delete>

  <update id="isDelete" parameterType="map">
    UPDATE LECTURE
    SET
    IS_DELETE = 0
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <update id="isUndelete" parameterType="map">
    UPDATE LECTURE
    SET
    IS_DELETE = 1
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <insert id="insert" parameterType="map">
    INSERT INTO LECTURE (member_id, lecture_name, dept, prof)
    VALUES (#{member_id},#{lecture_name},#{dept},#{prof})
  </insert>

  <insert id="insertAdmin" parameterType="map">
    INSERT INTO LECTURE (member_id, lecture_name, dept, prof, likes)
    VALUES (#{member_id},#{lecture_name},#{dept},#{prof}, 10)
  </insert>

  <update id="update" parameterType="map">
    UPDATE LECTURE
    SET
    lecture_name = #{lecture_name},
    dept = #{dept},
    prof = #{prof}
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <update id="updateLike" parameterType="map">
    UPDATE LECTURE
    SET
    likes = likes + 1
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <insert id="insertSub" parameterType="map">
    INSERT INTO LECTURESUB (lecture_id, member_id)
    VALUES (#{lecture_id},#{member_id})
  </insert>

  <select id="selectSub" parameterType="map" resultType="int" >
    SELECT Count(LS_ID) FROM LECTURESUB WHERE LECTURE_ID = #{lecture_id} AND MEMBER_ID = #{member_id}
  </select>

  <!--  <select id="selectSub" parameterType="map" resultType="map" >
      SELECT * FROM LECTURESUB WHERE LECTURE_ID = #{lecture_id} AND MEMBER_ID = #{member_id}
    </select>-->

</mapper>