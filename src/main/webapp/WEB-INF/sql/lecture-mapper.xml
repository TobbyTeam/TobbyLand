<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="LectureRepository">

  <!--select-->

  <select id="selectAll" resultType="map">
    SELECT L.*, D.department_name
    FROM LECTURE L LEFT OUTER JOIN DEPARTMENT D ON L.DEPT = D.DEPARTMENT_ID
    WHERE likes <![CDATA[ < ]]> 10 AND IS_DELETE = 1 ORDER BY WRITE_DATE DESC
  </select>

  <select id="selectMember_id" parameterType="int" resultType="int">
    SELECT member_id FROM LECTURE WHERE LECTURE_ID = #{lecture_id}
  </select>

  <select id="selectLecture" parameterType="int" resultType="map">
    SELECT L.*, D.department_name
    FROM LECTURE L LEFT OUTER JOIN DEPARTMENT D ON L.DEPT = D.DEPARTMENT_ID
    WHERE L.LECTURE_ID = #{lecture_id}
  </select>

  <select id="selectSearchLecture" parameterType="map" resultType="map">
    SELECT L.lecture_id, L.lecture_name, L.prof, D.department_name, SUM(IF(E.IS_DELETE = 1,1,0)) as count, IFNULL(AVG(IF(E.IS_DELETE = 1,E.SCORE,NULL)),0) as avg
    FROM LECTURE L LEFT OUTER JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID LEFT OUTER JOIN DEPARTMENT D ON L.DEPT = D.DEPARTMENT_ID
    WHERE L.LIKES <![CDATA[ >= ]]> 10 AND L.IS_DELETE = 1
    <choose>
      <when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">
        AND L.LECTURE_NAME LIKE CONCAT('%', #{searchWord}, '%')
      </when>
      <when test="searchType != null and searchType.equalsIgnoreCase('dept')">
        AND D.DEPARTMENT_NAME LIKE CONCAT('%', #{searchWord}, '%')
      </when>
      <otherwise>
        AND L.PROF LIKE CONCAT('%', #{searchWord}, '%')
      </otherwise>
    </choose>
    GROUP BY L.LECTURE_ID
    ORDER BY L.WRITE_DATE DESC
  </select>

  <select id="selectSubCount" parameterType="map" resultType="int" >
    SELECT Count(LS_ID)
    FROM LECTURESUB
    WHERE
    <choose>
      <when test="member_id != null">
        LECTURE_ID = #{lecture_id} AND MEMBER_ID = #{member_id} AND KIND = #{kind}
      </when>
      <otherwise>
        LECTURE_ID = #{lecture_id} AND KIND = #{kind} AND IS_DELETE = 1
      </otherwise>
    </choose>
  </select>

  <select id="selectBoardAll" parameterType="map" resultType="map" >
    SELECT rnum , ls_id, title, write_date
    FROM LECTURESUB
    WHERE LECTURE_ID = #{lecture_id} AND KIND = 2 AND IS_DELETE = 1
    ORDER BY RNUM DESC
    LIMIT 15 OFFSET #{page}
  </select>

  <select id="selectBoardMaxRnum" parameterType="int" resultType="String" >
    SELECT MAX(rnum) AS rnum
    FROM LECTURESUB
    WHERE LECTURE_ID = #{lecture_id} AND KIND = 2 AND IS_DELETE = 1
  </select>

  <select id="selectBoard" parameterType="int" resultType="map" >
    SELECT * FROM LECTURESUB
    WHERE LS_ID = #{ls_id}
  </select>

  <select id="selectBoardReplyAll" parameterType="int" resultType="map" >
    SELECT * FROM LECTURESUB
    WHERE REPLY = #{ls_id} AND IS_DELETE = 1
    ORDER BY WRITE_DATE
  </select>

  <select id="selectBoardMember_id" parameterType="int" resultType="int">
    SELECT member_id FROM LECTURESUB WHERE LS_ID = #{ls_id}
  </select>

  <select id="selectLecture_E" parameterType="int" resultType="map">
    SELECT L.lecture_name, L.prof, D.department_name, Count(IF(E.IS_DELETE = 1,1,NULL)) as count,  AVG(IF(E.IS_DELETE = 1,E.SCORE,NULL)) as avg
    FROM LECTURE L LEFT OUTER JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID LEFT OUTER JOIN DEPARTMENT D ON L.DEPT = D.DEPARTMENT_ID
    WHERE L.LECTURE_ID = #{lecture_id}
    GROUP BY L.LECTURE_ID
  </select>


  <!--insert-->

  <insert id="insertLecture" parameterType="map">
    INSERT INTO LECTURE (member_id, lecture_name, dept, prof)
    VALUES (#{member_id},#{lecture_name},#{dept},#{prof})
  </insert>

  <insert id="insertSub" parameterType="map">
    INSERT INTO LECTURESUB (lecture_id, member_id, kind, rnum, title, contents, reply)
    VALUES (#{lecture_id},#{member_id},#{kind},#{rnum},#{title},#{contents}, #{reply})
  </insert>


  <!--update-->

  <update id="updateLecture" parameterType="map">
    UPDATE LECTURE
    SET
    lecture_name = #{lecture_name},
    dept = #{dept},
    prof = #{prof}
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <update id="updateLectureLike" parameterType="map">
    UPDATE LECTURE
    SET
    likes = likes + 1
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <update id="updateUnisDelete" parameterType="map">
    UPDATE LECTURE
    SET
    IS_DELETE = 0
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <update id="updateBoard" parameterType="map">
    UPDATE LECTURESUB
    SET
    title = #{title},
    contents = #{contents}
    WHERE LS_ID = #{ls_id}
  </update>

  <update id="updateSubUnisDelete" parameterType="int">
    UPDATE LECTURESUB
    SET
    IS_DELETE = 0
    WHERE LS_ID = #{ls_id}
  </update>


  <!--delete-->

  <delete id="delete" parameterType="int">
    DELETE FROM LECTURE WHERE LECTURE_ID = #{value}
  </delete>




  <select id="selectAdmin" resultType="map">
    SELECT * FROM LECTURE ORDER BY WRITE_DATE DESC
  </select>

  <select id="selectSearchAdmin" parameterType="map" resultType="map">
    SELECT * FROM LECTURE
    WHERE
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">LECTURE_NAME LIKE CONCAT('%', #{searchWord}, '%')</when>
      <when test="searchType != null and searchType.equalsIgnoreCase('dept')">DEPT LIKE CONCAT('%', #{searchWord}, '%')</when>
      <when test="searchType != null and searchType.equalsIgnoreCase('prof')">PROF LIKE CONCAT('%', #{searchWord}, '%')</when>
      <otherwise>MEMBER_ID LIKE CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    ORDER BY WRITE_DATE DESC
  </select>

  <update id="isUndelete" parameterType="map">
    UPDATE LECTURE
    SET
    IS_DELETE = 1
    WHERE LECTURE_ID = #{lecture_id}
  </update>

  <insert id="insertAdmin" parameterType="map">
    INSERT INTO LECTURE (member_id, lecture_name, dept, prof, likes)
    VALUES (#{member_id},#{lecture_name},#{dept},#{prof}, 10)
  </insert>

<!--  <select id="boardAll" parameterType="map" resultType="map" >
        SELECT B.*
        FROM (
        SELECT @RNUM:=@RNUM-1 AS rnum , A.ls_id, A.title, A.write_date
        FROM (SELECT @RNUM:= #{total}+1) R,
        (SELECT * FROM LECTURESUB
        WHERE LECTURE_ID = #{lecture_id} AND KIND = 2 AND IS_DELETE = 1
        ORDER BY WRITE_DATE DESC) A) B
        LIMIT 15 OFFSET #{page}
  </select>-->

</mapper>