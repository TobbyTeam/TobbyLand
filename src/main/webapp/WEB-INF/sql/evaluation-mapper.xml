<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EvaluationRepository">

  <!--select-->

  <select id="selectEvaluationAll" parameterType="int" resultType="map">
    select e.evaluation_id, e.lecture_id, e.method, e.task, e.exam, e.comment, e.score, date_format(e.write_date, '%Y.%m.%d') as write_date,
           e.likes, e.dislike, e.report, s.semester_title, sum(if(e2.is_delete = 0,1,0)) as count
    from evaluation e left outer join semester s on e.semester = s.semester_id left outer join evaluation e2 on e.evaluation_id = e2.upper_id
    where e.lecture_id = #{lecture_id} and e.is_delete = 0 and e.is_reply = 0
    group by e.evaluation_id
    order by e.semester desc, write_date desc
  </select>

  <select id="selectEvaluationBest" parameterType="int" resultType="map">
    select e.evaluation_id, e.lecture_id, e.method, e.task, e.exam, e.comment, e.score, date_format(e.write_date, '%Y.%m.%d') as write_date,
           e.likes, e.dislike, e.report, s.semester_title, sum(if(e2.is_delete = 0,1,0)) as count
    from evaluation e left outer join semester s on e.semester = s.semester_id left outer join evaluation e2 on e.evaluation_id = e2.upper_id
    where e.lecture_id = #{lecture_id} and e.is_delete = 0 and e.is_reply = 0
    group by e.evaluation_id
    order by e.likes desc, e.semester desc, e.write_date desc limit 3
  </select>

  <select id="selectEvaluationCount" parameterType="map" resultType="int">
    select count(evaluation_id) from evaluation where member_id = #{member_id} and lecture_id = #{lecture_id} and is_delete = 0
  </select>

  <select id="selectMember_id" parameterType="int" resultType="int">
    select member_id from evaluation where evaluation_id = #{evaluation_id}
  </select>

  <select id="selectEvaluation" parameterType="int" resultType="map">
    select e.*, s.semester_title
    from evaluation e left outer join semester s on e.semester = s.semester_id
    where evaluation_id = #{evaluation_id} and is_delete = 0
  </select>

  <select id="selectSubCount" parameterType="map" resultType="int">
    select count(es_id) from evaluationsub where evaluation_id = #{evaluation_id} and member_id = #{member_id} and kind between 1 and 3
  </select>

  <select id="selectSubType" parameterType="map" resultType="int">
    select kind from evaluationsub where evaluation_id = #{evaluation_id} and member_id = #{member_id} and kind between 1 and 3
  </select>

  <select id="SearchEvaluationPrefer" parameterType="map" resultType="map">
    select e.evaluation_id, e.lecture_id, e.method, e.task, e.exam, e.comment, e.score, date_format(e.write_date, '%Y.%m.%d') as write_date,
    e.likes, e.dislike, e.report, s.semester_title, sum(if(e2.is_delete = 0,1,0)) as count
    from evaluation e left outer join semester s on e.semester = s.semester_id left outer join evaluation e2 on e.evaluation_id = e2.upper_id
    where e.lecture_id = #{lecture_id} and e.is_delete = 0 and e.is_reply = 0
    <choose>
      <when test="method != null and method.equalsIgnoreCase('all')"> </when>
      <otherwise>
        and e.member_method = #{method}
      </otherwise>
    </choose>
    <choose>
      <when test="task != null and task.equalsIgnoreCase('all')"> </when>
      <otherwise>
        and e.member_task = #{task}
      </otherwise>
    </choose>
    <choose>
      <when test="exam != null and exam.equalsIgnoreCase('all')"> </when>
      <otherwise>
        and e.member_exam = #{exam}
      </otherwise>
    </choose>
    group by e.evaluation_id
    order by e.semester desc, e.write_date desc
  </select>

  <select id="selectReplyAll" parameterType="int" resultType="map">
    select evaluation_id, comment, date_format(write_date, '%Y.%m.%d %T') as write_date, report
    from evaluation
    where upper_id = #{evaluation_id} and is_delete = 0
    order by write_date
  </select>

  <select id="selectReplyMember_id" parameterType="int" resultType="int">
    select member_id from evaluationsub where es_id = #{es_id}
  </select>


  <!--insert-->

  <insert id="insertEvaluation" parameterType="map">
    <choose>
      <when test="upper_id != null">
        insert into evaluation (lecture_id, member_id, comment, is_reply, upper_id)
        values (#{lecture_id},#{member_id},#{comment},1,#{upper_id})
      </when>
      <otherwise>
        insert into evaluation (lecture_id, member_id, method, task, exam, comment, score, semester, member_method, member_task, member_exam)
        values (#{lecture_id},#{member_id},#{method},#{task},#{exam},#{comment},#{score},#{semester},#{member_method},#{member_task},#{member_exam})
      </otherwise>
    </choose>
  </insert>

  <insert id="insertSub" parameterType="map">
    insert into evaluationsub (evaluation_id, member_id, kind)
    values (#{evaluation_id},#{member_id},#{kind})
  </insert>


  <!--update-->

  <update id="updateEvaluation" parameterType="map">
    update evaluation
    set
    method = #{method},
    task = #{task},
    exam = #{exam},
    comment = #{comment},
    score = #{score},
    semester = #{semester}
    where evaluation_id = #{evaluation_id}
  </update>

  <update id="updateEvaluationLike" parameterType="int">
    update evaluation
    set
    likes = likes + 1
    where evaluation_id = #{evaluation_id}
  </update>

  <update id="updateEvaluationDislike" parameterType="int">
    update evaluation
    set
    dislike = dislike + 1
    where evaluation_id = #{evaluation_id}
  </update>

  <update id="updateEvaluationReport" parameterType="int">
    update evaluation
    set
    report = report + 1
    where evaluation_id = #{evaluation_id}
  </update>

  <update id="updateIsDelete" parameterType="int">
    update evaluation
    set
    is_delete = 1
    where evaluation_id = #{evaluation_id}
  </update>


  <!--delete-->

  <delete id="delete" parameterType="int">
    delete from evaluation where evaluation_id = #{value}
  </delete>




  <select id="selectAll" resultType="map">
    select * from evaluation where is_delete = 1 and report <![CDATA[ < ]]> 5 order by write_date desc
  </select>

  <select id="selectAdmin" resultType="map">
    select e.evaluation_id as evaluation_id, e.member_id as member_id, e.lecture_id as lecture_id, l.lecture_name as lecture_name,
    e.method as method, e.task as task, e.exam as exam, e.comment as comment, e.score as score, e.write_date as write_date,
    e.likes as likes, e.dislike as dislike, e.report as report, e.is_delete as is_delete
    from lecture l join evaluation e on l.lecture_id = e.lecture_id
    order by l.lecture_id, e.write_date desc
  </select>

<!--  <select id="selectReport" resultType="map">
    SELECT L.LECTURE_ID, L.LECTURE_NAME, E.EVALUATION_ID, E.MEMBER_ID, E.METHOD, E.TASK, E.EXAM, E.COMMENT,
           E.SCORE, E.WRITE_DATE, E.LIKES, E.DISLIKE, E.REPORT, E.IS_DELETE
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    WHERE REPORT <![CDATA[ >= ]]> 5
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>-->

  <select id="selectReport" resultType="map">
    select e.evaluation_id as evaluation_id, e.member_id as member_id, e.lecture_id as lecture_id, l.lecture_name as lecture_name,
    e.method as method, e.task as task, e.exam as exam, e.comment as comment, e.score as score, e.write_date as write_date,
    e.likes as likes, e.dislike as dislike, e.report as report, e.is_delete as is_delete
    from evaluation e left outer join lecture l on l.lecture_id = e.lecture_id
    where report <![CDATA[ >= ]]> 5
    order by l.lecture_id, e.write_date desc
  </select>

  <select id="selectSearchAdmin" resultType="map">
    select e.evaluation_id as evaluation_id, e.member_id as member_id, e.lecture_id as lecture_id, l.lecture_name as lecture_name,
    e.method as method, e.task as task, e.exam as exam, e.comment as comment, e.score as score, e.write_date as write_date,
    e.likes as likes, e.dislike as dislike, e.report as report, e.is_delete as is_delete
    from lecture l join evaluation e on l.lecture_id = e.lecture_id
    where
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">l.lecture_name like CONCAT('%', #{searchWord}, '%')</when>
    <when test="searchType != null and searchType.equalsIgnoreCase('content')">e.comment like CONCAT('%', #{searchWord}, '%') or
    e.method like CONCAT('%', #{searchWord}, '%') or e.task like CONCAT('%', #{searchWord}, '%') or e.exam like CONCAT('%', #{searchWord}, '%')</when>
    <otherwise>e.member_id like CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    order by l.lecture_id, e.write_date desc
  </select>

  <select id="selectSearch" parameterType="map" resultType="map">
    select l.lecture_id as lecture_id, l.lecture_name as lecture_name, l.dept as dept, l.prof as prof, sum(if(e.is_delete = 1,1,0)) as count
    from lecture l left outer join evaluation e on e.lecture_id = l.lecture_id
    where l.likes <![CDATA[ >= ]]> 10 and l.is_delete = 1 and l.prof like CONCAT('%', #{searchWord}, '%')
    group by l.lecture_id
    order by l.write_date desc
  </select>

  <update id="isUndelete" parameterType="int">
    update evaluation
    set
    is_delete = 1
    where evaluation_id = #{evaluation_id}
  </update>

  <update id="updateAdmin" parameterType="map">
    update evaluation
    set
    method = #{method},
    task = #{task},
    exam = #{exam},
    comment = #{comment},
    score = #{score},
    report = #{report}
    where evaluation_id = #{evaluation_id}
  </update>

</mapper>