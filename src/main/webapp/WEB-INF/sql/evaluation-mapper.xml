<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EvaluationRepository">

  <!--select-->

  <select id="selectEvaluationAll" parameterType="int" resultType="map">
    SELECT E.*, SUM(IF(S.IS_DELETE = 1, 1,0)) AS count
    FROM EVALUATION E LEFT OUTER JOIN EVALUATIONSUB S ON E.EVALUATION_ID = S.EVALUATION_ID
    WHERE E.LECTURE_ID = #{lecture_id} AND E.IS_DELETE = 1
    GROUP BY E.EVALUATION_ID
    ORDER BY SEMESTER DESC, WRITE_DATE DESC
  </select>

  <select id="selectEvaluationBest" parameterType="int" resultType="map">
    SELECT E.*, SUM(IF(S.IS_DELETE = 1, 1,0)) AS count
    FROM EVALUATION E LEFT OUTER JOIN EVALUATIONSUB S ON E.EVALUATION_ID = S.EVALUATION_ID
    WHERE E.LECTURE_ID = #{lecture_id} AND E.IS_DELETE = 1
    GROUP BY E.EVALUATION_ID
    ORDER BY LIKES DESC, SEMESTER DESC, WRITE_DATE DESC LIMIT 3
  </select>

  <select id="selectEvaluationCount" parameterType="map" resultType="int">
    SELECT Count(evaluation_id) FROM EVALUATION WHERE MEMBER_ID = #{member_id} AND LECTURE_ID = #{lecture_id}
  </select>

  <select id="selectMember_id" parameterType="int" resultType="int">
    SELECT member_id FROM EVALUATION WHERE Evaluation_ID = #{evaluation_id}
  </select>

  <select id="selectEvaluation" parameterType="int" resultType="map">
    SELECT * FROM EVALUATION WHERE Evaluation_ID = #{evaluation_id}
  </select>

  <select id="selectSubCount" parameterType="map" resultType="int">
    SELECT count(es_id) FROM EVALUATIONSUB WHERE EVALUATION_ID = #{evaluation_id} AND MEMBER_ID = #{member_id} AND CONTENTS IS NULL
  </select>

  <select id="selectSubType" parameterType="map" resultType="int">
    SELECT kind FROM EVALUATIONSUB WHERE EVALUATION_ID = #{evaluation_id} AND MEMBER_ID = #{member_id} AND CONTENTS IS NULL
  </select>

  <select id="SearchEvaluationPrefer" parameterType="map" resultType="map">
    SELECT *
    FROM EVALUATION E LEFT OUTER JOIN MEMBER M ON E.MEMBER_ID = M.MEMBER_ID
    WHERE E.LECTURE_ID = #{lecture_id} AND E.IS_DELETE = 1
    <choose>
      <when test="method != null and method.equalsIgnoreCase('all')"> </when>
      <otherwise> AND M.METHOD = #{method}</otherwise>
    </choose>
    <choose>
      <when test="task != null and task.equalsIgnoreCase('all')"> </when>
      <otherwise> AND M.TASK = #{task}</otherwise>
    </choose>
    <choose>
      <when test="exam != null and exam.equalsIgnoreCase('all')"> </when>
      <otherwise> AND M.EXAM = #{exam}</otherwise>
    </choose>
    ORDER BY SEMESTER DESC, WRITE_DATE DESC
  </select>

  <select id="selectReplyAll" parameterType="int" resultType="map">
    SELECT es_id, contents, write_date FROM EVALUATIONSUB WHERE EVALUATION_ID = #{evaluation_id} AND KIND = 4 AND IS_DELETE = 1
  </select>

  <select id="selectReplyMember_id" parameterType="int" resultType="int">
    SELECT member_id FROM EVALUATIONSUB WHERE ES_ID = #{es_id}
  </select>


  <!--insert-->

  <insert id="insertEvaluation" parameterType="map">
    INSERT INTO EVALUATION (lecture_id, member_id, method, task, exam, comment, score, semester)
    VALUES (#{lecture_id},#{member_id},#{method},#{task},#{exam},#{comment},#{score},#{semester})
  </insert>

  <insert id="insertSub" parameterType="map">
    INSERT INTO EVALUATIONSUB (evaluation_id, member_id, kind, contents)
    VALUES (#{evaluation_id},#{member_id},#{kind},#{contents})
  </insert>


  <!--update-->

  <update id="updateEvaluation" parameterType="map">
    UPDATE EVALUATION
    SET
    method = #{method},
    task = #{task},
    exam = #{exam},
    comment = #{comment},
    score = #{score},
    semester = #{semester}
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateEvaluationLike" parameterType="int">
    UPDATE EVALUATION
    SET
    likes = likes + 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateEvaluationDislike" parameterType="int">
    UPDATE EVALUATION
    SET
    dislike = dislike + 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateEvaluationReport" parameterType="int">
    UPDATE EVALUATION
    SET
    report = report + 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateUnisDelete" parameterType="int">
    UPDATE EVALUATION
    SET
    IS_DELETE = 0
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateReplyUnisDelete" parameterType="int">
    UPDATE EVALUATIONSUB
    SET
    IS_DELETE = 0
    WHERE ES_ID = #{es_id}
  </update>


  <!--delete-->

  <delete id="delete" parameterType="int">
    DELETE FROM EVALUATION WHERE EVALUATION_ID = #{value}
  </delete>




  <select id="selectAll" resultType="map">
    SELECT * FROM EVALUATION WHERE IS_DELETE = 1 AND REPORT <![CDATA[ < ]]> 5 ORDER BY WRITE_DATE DESC
  </select>

  <select id="selectAdmin" resultType="map">
    SELECT E.EVALUATION_ID AS evaluation_id, E.MEMBER_ID AS member_id, E.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name,
    E.METHOD AS method, E.TASK AS task, E.EXAM AS exam, E.COMMENT AS comment, E.SCORE AS score, E.WRITE_DATE AS write_date,
    E.LIKES AS likes, E.DISLIKE AS dislike, E.REPORT AS report, E.IS_DELETE AS is_delete
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>

<!--  <select id="selectReport" resultType="map">
    SELECT L.LECTURE_ID, L.LECTURE_NAME, E.EVALUATION_ID, E.MEMBER_ID, E.METHOD, E.TASK, E.EXAM, E.COMMENT,
           E.SCORE, E.WRITE_DATE, E.LIKES, E.DISLIKE, E.REPORT, E.IS_DELETE
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    WHERE REPORT <![CDATA[ >= ]]> 5
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>-->

  <select id="selectReport" resultType="map">
    SELECT E.EVALUATION_ID AS evaluation_id, E.MEMBER_ID AS member_id, E.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name,
    E.METHOD AS method, E.TASK AS task, E.EXAM AS exam, E.COMMENT AS comment, E.SCORE AS score, E.WRITE_DATE AS write_date,
    E.LIKES AS likes, E.DISLIKE AS dislike, E.REPORT AS report, E.IS_DELETE AS is_delete
    FROM EVALUATION E LEFT OUTER JOIN LECTURE L ON L.LECTURE_ID = E.LECTURE_ID
    WHERE REPORT <![CDATA[ >= ]]> 5
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>

  <select id="selectSearchAdmin" resultType="map">
    SELECT E.EVALUATION_ID AS evaluation_id, E.MEMBER_ID AS member_id, E.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name,
    E.METHOD AS method, E.TASK AS task, E.EXAM AS exam, E.COMMENT AS comment, E.SCORE AS score, E.WRITE_DATE AS write_date,
    E.LIKES AS likes, E.DISLIKE AS dislike, E.REPORT AS report, E.IS_DELETE AS is_delete
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    WHERE
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">L.LECTURE_NAME LIKE CONCAT('%', #{searchWord}, '%')</when>
    <when test="searchType != null and searchType.equalsIgnoreCase('content')">E.COMMENT LIKE CONCAT('%', #{searchWord}, '%') OR
    E.METHOD LIKE CONCAT('%', #{searchWord}, '%') OR E.TASK LIKE CONCAT('%', #{searchWord}, '%') OR E.EXAM LIKE CONCAT('%', #{searchWord}, '%')</when>
    <otherwise>E.MEMBER_ID LIKE CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>





  <select id="selectSearch" parameterType="map" resultType="map">
    SELECT L.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name, L.DEPT AS dept, L.PROF AS prof, SUM(IF(E.IS_DELETE = 1,1,0)) AS count
    FROM LECTURE L LEFT OUTER JOIN EVALUATION E ON E.LECTURE_ID = L.LECTURE_ID
    WHERE L.LIKES <![CDATA[ >= ]]> 10 AND L.IS_DELETE = 1 AND L.PROF LIKE CONCAT('%', #{searchWord}, '%')
    GROUP BY L.LECTURE_ID
    ORDER BY L.WRITE_DATE DESC
  </select>








  <update id="isUndelete" parameterType="int">
    UPDATE EVALUATION
    SET
    IS_DELETE = 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>





  <update id="updateAdmin" parameterType="map">
    UPDATE EVALUATION
    SET
    method = #{method},
    task = #{task},
    exam = #{exam},
    comment = #{comment},
    score = #{score},
    report = #{report}
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>


















</mapper>