<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EvaluationRepository">

  <select id="select" resultType="map">
    SELECT * FROM EVALUATION WHERE Evaluation_ID = #{value}
  </select>

  <select id="selectAll" resultType="map">
    SELECT * FROM EVALUATION WHERE IS_DELETE <![CDATA[ = ]]> 1 AND REPORT <![CDATA[ < ]]> 5 ORDER BY WRITE_DATE DESC
  </select>

  <select id="selectAdmin" resultType="map">
    SELECT E.EVALUATION_ID AS evaluation_id, E.MEMBER_ID AS member_id, E.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name,
    E.METHOD AS method, E.TASK AS task, E.EXAM AS exam, E.COMMENT AS comment, E.SCORE AS score, E.WRITE_DATE AS write_date,
    E.LIKES AS likes, E.DISLIKE AS dislike, E.REPORT AS report, E.IS_DELETE AS is_delete
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>

<!--  <select id="selectReport" resultType="map">
    SELECT L.LECTURE_ID, L.LECTURE_NAME, E.EVALUATION_ID, E.MEMBER_ID, E.METHOD, E.TASK, E.EXAM, E.COMMENT,
           E.SCORE, E.WRITE_DATE, E.LIKES, E.DISLIKE, E.REPORT, E.IS_DELETE
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    WHERE REPORT <![CDATA[ >= ]]> 5
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>-->

  <select id="selectReport" resultType="map">
    SELECT E.EVALUATION_ID AS evaluation_id, E.MEMBER_ID AS member_id, E.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name,
    E.METHOD AS method, E.TASK AS task, E.EXAM AS exam, E.COMMENT AS comment, E.SCORE AS score, E.WRITE_DATE AS write_date,
    E.LIKES AS likes, E.DISLIKE AS dislike, E.REPORT AS report, E.IS_DELETE AS is_delete
    FROM EVALUATION E LEFT OUTER JOIN LECTURE L ON L.LECTURE_ID = E.LECTURE_ID
    WHERE REPORT <![CDATA[ >= ]]> 5
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>

  <select id="selectSearchAdmin" resultType="map">
    SELECT E.EVALUATION_ID AS evaluation_id, E.MEMBER_ID AS member_id, E.LECTURE_ID AS lecture_id, L.LECTURE_NAME AS lecture_name,
    E.METHOD AS method, E.TASK AS task, E.EXAM AS exam, E.COMMENT AS comment, E.SCORE AS score, E.WRITE_DATE AS write_date,
    E.LIKES AS likes, E.DISLIKE AS dislike, E.REPORT AS report, E.IS_DELETE AS is_delete
    FROM LECTURE L JOIN EVALUATION E ON L.LECTURE_ID = E.LECTURE_ID
    WHERE
    <choose><when test="searchType != null and searchType.equalsIgnoreCase('lecture_name')">L.LECTURE_NAME LIKE CONCAT('%', #{searchWord}, '%')</when>
    <when test="searchType != null and searchType.equalsIgnoreCase('content')">E.COMMENT LIKE CONCAT('%', #{searchWord}, '%') OR
    E.METHOD LIKE CONCAT('%', #{searchWord}, '%') OR E.TASK LIKE CONCAT('%', #{searchWord}, '%') OR E.EXAM LIKE CONCAT('%', #{searchWord}, '%')</when>
    <otherwise>E.MEMBER_ID LIKE CONCAT('%', #{searchWord}, '%')</otherwise>
    </choose>
    ORDER BY L.LECTURE_ID, E.WRITE_DATE DESC
  </select>

  <select id="selectL" resultType="map">
    SELECT * FROM EVALUATION WHERE LECTURE_ID = #{value} AND IS_DELETE <![CDATA[ = ]]> 1 ORDER BY SEMESTER DESC, WRITE_DATE DESC
  </select>

  <select id="selectBest" resultType="map">
    SELECT * FROM EVALUATION WHERE LECTURE_ID = #{value} AND IS_DELETE <![CDATA[ = ]]> 1 ORDER BY LIKES DESC, WRITE_DATE DESC LIMIT 3
  </select>

  <select id="selectCount" resultType="int">
    SELECT Count(evaluation_id) FROM EVALUATION WHERE MEMBER_ID = #{member_id} AND LECTURE_ID = #{lecture_id}
  </select>

  <select id="selectMember" resultType="String">
    SELECT member_id FROM EVALUATION WHERE Evaluation_ID = #{evaluation_id}
  </select>

  <select id="SearchPrefer" parameterType="map" resultType="map">
    SELECT *
    FROM EVALUATION E LEFT OUTER JOIN MEMBER M ON E.MEMBER_ID = M.MEMBER_ID
    WHERE E.LECTURE_ID = #{lecture_id} AND E.IS_DELETE <![CDATA[ = ]]> 1
    <choose>
      <when test="method != null and method.equalsIgnoreCase('all')"> </when>
      <otherwise> AND M.METHOD = #{method}</otherwise>
    </choose>
    <choose>
      <when test="task != null and task.equalsIgnoreCase('all')"> </when>
      <otherwise> AND M.TASK = #{task}</otherwise>
    </choose>
    <choose>
      <when test="exam != null and exam.equalsIgnoreCase('all')"> </when>
      <otherwise> AND M.EXAM = #{exam}</otherwise>
    </choose>
    ORDER BY SEMESTER DESC, WRITE_DATE DESC
  </select>

  <delete id="delete" parameterType="int">
    DELETE FROM EVALUATION WHERE EVALUATION_ID = #{value}
  </delete>

  <update id="isDelete" parameterType="int">
    UPDATE EVALUATION
    SET
    IS_DELETE = 0
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="isUndelete" parameterType="int">
    UPDATE EVALUATION
    SET
    IS_DELETE = 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <insert id="insert" parameterType="map">
    INSERT INTO EVALUATION (lecture_id, member_id, method, task, exam, comment, score, semester)
    VALUES (#{lecture_id},#{member_id},#{method},#{task},#{exam},#{comment},#{score},#{semester})
  </insert>

  <update id="update" parameterType="map">
    UPDATE EVALUATION
    SET
    method = #{method},
    task = #{task},
    exam = #{exam},
    comment = #{comment},
    score = #{score},
    semester = #{semester}
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateAdmin" parameterType="map">
    UPDATE EVALUATION
    SET
    method = #{method},
    task = #{task},
    exam = #{exam},
    comment = #{comment},
    score = #{score},
    report = #{report}
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateLike" parameterType="map">
    UPDATE EVALUATION
    SET
    likes = likes + 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateDislike" parameterType="map">
    UPDATE EVALUATION
    SET
    dislike = dislike + 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <update id="updateReport" parameterType="map">
    UPDATE EVALUATION
    SET
    report = report + 1
    WHERE EVALUATION_ID = #{evaluation_id}
  </update>

  <insert id="insertSub" parameterType="map">
    INSERT INTO EVALUATIONSUB (evaluation_id, member_id)
    VALUES (#{evaluation_id},#{member_id})
  </insert>

  <select id="selectSub" parameterType="map" resultType="int" >
    SELECT Count(ES_ID) FROM EVALUATIONSUB WHERE EVALUATION_ID = #{evaluation_id} AND MEMBER_ID = #{member_id}
  </select>

</mapper>